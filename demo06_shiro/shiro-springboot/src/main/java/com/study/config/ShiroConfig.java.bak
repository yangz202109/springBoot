package com.study.config;

import at.pollux.thymeleaf.shiro.dialect.ShiroDialect;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * @auther shkstart
 * @create 2021-11-11-11:10
 */
@Configuration
public class ShiroConfig {

    //ShiroFilterFactoryBean
    @Bean
    public ShiroFilterFactoryBean GetShiroFilterFactory(@Qualifier("securityManager") DefaultWebSecurityManager defaultWebSecurityManager){
          ShiroFilterFactoryBean bean=new ShiroFilterFactoryBean();
        //设置安全管理器
        bean.setSecurityManager(defaultWebSecurityManager);

        //添加shiro的内置过滤器
        /*
            anon: 无需认证就可以访问
            authc: 必须认证了才能访问
            user:  必须拥有 记住我 功能才能用
            perms: 拥有某个资源的权限才能访问
            role: 拥有某个角色权限才能访问
        */
        //拦截
        Map<String,String> filterMap=new LinkedHashMap<>();

        //授权
        filterMap.put("/to/a","perms[level:a]");
        filterMap.put("/to/b","perms[level:b]");

        //设置请求的拦截
        filterMap.put("/to/*","authc");


        bean.setFilterChainDefinitionMap(filterMap);

        //设置登录的请求,如果没有权限就到登录页面
        bean.setLoginUrl("/tologin");
        //无授权会跳到
        bean.setUnauthorizedUrl("/noauth");

        return bean;

    }


    //DefaultWebSecurityManager(管理所有Subject)  2
    @Bean(name="securityManager")
    public DefaultWebSecurityManager getDefaultSecurityManager(@Qualifier("userRealm") UserRealm userRealm){
        DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();
        //关联UserRealm
        securityManager.setRealm(userRealm);
        return securityManager;
    }

    //创建 realm 对象(用于进行权限信息的验证，我们自己实现)  1
    @Bean
    public UserRealm userRealm(){
        UserRealm realm = new UserRealm();
        //修改凭证校验匹配器
        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();
        //属性加密算法为md5
        matcher.setHashAlgorithmName("MD5");
        //设置散列次数
        matcher.setHashIterations(1024);

        realm.setCredentialsMatcher(matcher);
        return realm;
    }


    //Shiro整合thymeleaf
    @Bean
    public ShiroDialect shiroDialect(){
        return new ShiroDialect();
    }

}
